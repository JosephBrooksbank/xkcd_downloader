#! /usr/bin/env python3

import argparse
import configparser
import json
import os
import subprocess
import urllib
import urllib.request
from sys import exit

config_file_location = os.path.expanduser('~') + "/.config/xkcd_download/xkcd_download.conf"
config = configparser.ConfigParser()
config.read(config_file_location)

flags = argparse.ArgumentParser(description="Download the latest xkcd")
flags.add_argument("-c", "--config", action="store_true", help="Runs the first time setup again")
flags.add_argument("-v", "--verbose", action="store_true", help="Makes the output more verbose")
flags.add_argument("-r", "--remove", action="store_true", help="Removes previous comic rather than storing")
flags.add_argument("-f", "--force", action="store_true", help="Forces update of comic")
args = flags.parse_args()

verboseprint = print if args.verbose else lambda *a, **k: None


def main():
    if config.get("first_run", "setup") == "True" or args.config:
        verboseprint("Running Setup..")
        setup()
    install_dir = config.get("install_location", "location")
    previous_comic_file = open(install_dir + "/previous_comic.txt")
    previous_comic_title = previous_comic_file.read()
    previous_comic_file.close()
    current_comic_title = safe_name(get_data("http://xkcd.com/info.0.json"))
    verboseprint("Checking for new comic and downloading..")
    get_comic(previous_comic_title, current_comic_title, get_data("http://xkcd.com/info.0.json"))


def setup():
    config_file = open(config_file_location, 'w')
    config.set("install_location", "location", install_location())
    config.set("first_run", "setup", "False")
    verboseprint("Saving changes to config file at" + config_file_location)
    config.write(config_file)
    config_file.close()


def install_location():
    if input("default install location is ~/.xkcd_download. Change? (y/n)") == "y":
        install_dir = input("enter new location here")
        verboseprint("Install location changed to " + install_dir)
    else:
        install_dir = os.path.expanduser("~") + "/.xkcd_download"
        verboseprint("Install location staying as " + install_dir)
    if not os.path.exists(install_dir):
        verboseprint("Path did not exist, creating...")
        os.mkdir(install_dir)
    return install_dir


def get_data(json_url):
    try:
        verboseprint("attempting to get json url..")
        json_file = urllib.request.urlopen(json_url)
        return json.loads(json_file.read().decode("utf-8"))
    except:
        print("No internet found")
        verboseprint("Failed to connect to url, internet is down or possible change in url, check xkcd")
        exit()


def safe_name(data):
    return data['safe_title'].replace(' ', '_').replace('/', '_').lower() + ".png"


def previous_title():
    install_dir = config.get("install_location", "location")
    return open(install_dir + "/previous_comic", 'r').read()


def get_comic(previous_title, current_title, data):
    install_dir = config.get("install_location", "location")
    previous_comic = install_dir + "/" + previous_title
    current_comic = install_dir + "/" + current_title

    if (previous_title != current_title) or args.force:
        if (not previous_title == "NULL") and (not args.force):
            if args.remove:
                subprocess.call(['rm', previous_comic])
            else:
                subprocess.call(['mv', previous_comic, install_dir + "/old_comics"])

        urllib.request.urlretrieve(data['img'], install_dir + "/" + current_title)

        safe_alt = str(data["alt"]).replace("'", "'\\''")  # Sanitizes alt/title text
        (subprocess.run(['convert ' + current_comic + ' -background White -pointsize 12 label:\'' +
                         safe_alt + '\' -gravity Center -append ' + current_comic], shell=True, ))

        previous_comic_file = open(install_dir + "/previous_comic.txt", 'w')
        previous_comic_file.write(current_title)
        print(current_title)
        previous_comic_file.close()

    elif previous_title == current_title:
        print("Already got the latest comic!")
        verboseprint("Previous comic title matched current comic's title")
        exit()


if __name__ == '__main__':
    main()
